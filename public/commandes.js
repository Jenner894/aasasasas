document.addEventListener('DOMContentLoaded', function() {
    // V√©rifier l'√©tat d'authentification
    checkAuthStatus();
    
    // Charger les commandes de l'utilisateur
    loadUserOrders();
    
    // Initialiser les filtres et √©couteurs d'√©v√©nements
    initFilterButtons();
    initExpandButtons();
    setupSearchOrder();
        // Initialiser le modal de file d'attente
    initQueueModal();
    // Initialiser le modal de chat
    initChatModal();
    enhanceModalAnimations();
    setupStatusChangeNotifications();
    // Initialiser l'aper√ßu de la file d'attente
    initQueuePreview();
});
/////////////////////////////////////////////////////////////////////////////////// fileee d'attente //////////////////////// 
function createQueueModal() {
    console.log('Cr√©ation du modal de file d\'attente');
    
    // V√©rifier si le modal existe d√©j√†
    if (document.getElementById('queue-modal')) {
        console.log('Le modal existe d√©j√†');
        return;
    }
    
    // Cr√©er l'√©l√©ment modal
    const modal = document.createElement('div');
    modal.id = 'queue-modal';
    modal.className = 'modal';
    
    // D√©finir le contenu HTML du modal
    modal.innerHTML = `
    <div class="modal-content">
        <div class="modal-header">
            <div class="modal-title">File d'attente - Commande #<span id="queue-order-id"></span></div>
            <button class="modal-close" id="close-queue-modal">√ó</button>
        </div>
        <div class="modal-body">
            <div class="queue-info">
                <div class="queue-card">
                    <div class="queue-header">
                        <div class="queue-title">Votre position</div>
                        <div class="queue-icon">üö∂</div>
                    </div>
                    <div class="queue-body">
                        <div class="queue-position" id="modal-queue-position">3</div>
                        <div class="queue-label">dans la file d'attente</div>
                    </div>
                </div>
                
                <div class="queue-card">
                    <div class="queue-header">
                        <div class="queue-title">Temps estim√©</div>
                        <div class="queue-icon">‚è±Ô∏è</div>
                    </div>
                    <div class="queue-body">
                        <div class="queue-time" id="modal-queue-time">45 min</div>
                        <div class="queue-label">avant livraison</div>
                    </div>
                </div>
                
                <div class="queue-card">
                    <div class="queue-header">
                        <div class="queue-title">Statut actuel</div>
                        <div class="queue-icon">üìã</div>
                    </div>
                    <div class="queue-body">
                        <div class="queue-status status-processing" id="modal-queue-status">En pr√©paration</div>
                        <div class="queue-label">de votre commande</div>
                    </div>
                </div>
            </div>
            
            <div class="queue-visualization">
                <div class="queue-line">
                    <div class="queue-progress" id="modal-queue-progress" style="width: 50%;"></div>
                </div>
                <div class="queue-markers">
                    <div class="queue-marker active">
                        <div class="marker-icon">üìã</div>
                        <div class="marker-label">Confirmation</div>
                    </div>
                    <div class="queue-marker active">
                        <div class="marker-icon">üë®‚Äçüç≥</div>
                        <div class="marker-label">Pr√©paration</div>
                    </div>
                    <div class="queue-marker">
                        <div class="marker-icon">üöö</div>
                        <div class="marker-label">En route</div>
                    </div>
                    <div class="queue-marker">
                        <div class="marker-icon">üéÅ</div>
                        <div class="marker-label">Livraison</div>
                    </div>
                </div>
            </div>
            
            <div class="queue-refresh">
                <button id="modal-refresh-queue" class="action-btn secondary">
                    <span class="refresh-icon">üîÑ</span> Actualiser le statut
                </button>
                <div class="last-updated" id="modal-last-updated">Derni√®re mise √† jour: 14:35</div>
            </div>
        </div>
    </div>`;
    
    // Ajouter le modal au corps du document
    document.body.appendChild(modal);
    console.log('Modal de file d\'attente cr√©√© et ajout√© au DOM');
}
// Fonction pour initialiser le modal de file d'attente
function initQueueModal() {
    // Cr√©er le modal s'il n'existe pas
    createQueueModal();
    
    // V√©rifier si le modal existe maintenant
    const queueModal = document.getElementById('queue-modal');
    
    if (queueModal) {
        console.log('Modal de file d\'attente trouv√©');
        
        // Compter combien de boutons de file d'attente existent
        const queueButtons = document.querySelectorAll('.queue-btn');
        console.log('Nombre de boutons de file d\'attente:', queueButtons.length); // Ajout pour d√©boguer
        
        // Ajouter les √©v√©nements pour les boutons de file d'attente
        document.querySelectorAll('.queue-modal').forEach(button => {
            button.addEventListener('click', function(e) {
                console.log('Bouton de file d\'attente cliqu√©');
                e.preventDefault(); 
                e.stopPropagation();
                
                const orderId = this.getAttribute('data-order');
                console.log('OrderID:', orderId);
                
                document.getElementById('queue-order-id').textContent = orderId;
                
                // Charger les donn√©es r√©elles de file d'attente
                updateQueueModal(orderId);
                
                // Afficher le modal
                queueModal.classList.add('active');
            });
        });
        
        // Fermer le modal
        document.getElementById('close-queue-modal').addEventListener('click', function() {
            queueModal.classList.remove('active');
        });
        
        // Bouton de rafra√Æchissement dans le modal
        document.getElementById('modal-refresh-queue').addEventListener('click', function() {
            const orderId = document.getElementById('queue-order-id').textContent;
            updateQueueModal(orderId);
        });
    } else {
        console.error('Impossible de trouver ou de cr√©er le modal de file d\'attente');
    }
}
function updateQueueModal(orderId) {
    console.log('Mise √† jour du modal de file d\'attente pour la commande:', orderId);
    
    // Mettre √† jour l'ID de commande dans le modal
    document.getElementById('queue-order-id').textContent = orderId;
    
    // Simuler un chargement des donn√©es
    document.getElementById('modal-queue-position').textContent = "...";
    document.getElementById('modal-queue-time').textContent = "Chargement...";
    document.getElementById('modal-queue-status').textContent = "Chargement...";
    
    // Dans une application r√©elle, vous feriez un appel API ici pour obtenir les donn√©es
    // Par exemple:
    fetch(`/api/orders/${orderId}/queue`)
        .then(response => response.json())
        .then(data => {
            if (data.success && data.inQueue) {
                // Mettre √† jour la position dans la file d'attente
                document.getElementById('modal-queue-position').textContent = data.queueInfo.position;
                
                // Mettre √† jour le temps estim√©
                const estimatedTime = data.queueInfo.estimatedTime;
                let timeDisplay = '30-45 min'; // Valeur par d√©faut
                
                if (estimatedTime !== undefined) {
                    if (estimatedTime <= 5) {
                        timeDisplay = '5-10 min';
                    } else if (estimatedTime <= 15) {
                        timeDisplay = '10-20 min';
                    } else if (estimatedTime <= 30) {
                        timeDisplay = '20-30 min';
                    } else if (estimatedTime <= 45) {
                        timeDisplay = '30-45 min';
                    } else {
                        timeDisplay = '45-60 min';
                    }
                }
                
                document.getElementById('modal-queue-time').textContent = timeDisplay;
                
                // Mettre √† jour le statut
                document.getElementById('modal-queue-status').textContent = data.status;
                
                // Mettre √† jour la classe CSS du statut
                const statusElement = document.getElementById('modal-queue-status');
                statusElement.className = 'queue-status';
                switch(data.status) {
                    case 'En attente':
                        statusElement.classList.add('status-pending');
                        break;
                    case 'En pr√©paration':
                        statusElement.classList.add('status-processing');
                        break;
                    case 'Exp√©di√©':
                    case 'En route':
                    case 'Pr√™te pour livraison':
                        statusElement.classList.add('status-shipped');
                        break;
                    case 'Livr√©':
                        statusElement.classList.add('status-delivered');
                        break;
                    case 'Annul√©':
                        statusElement.classList.add('status-cancelled');
                        break;
                }
                
                // Mettre √† jour les marqueurs d'√©tape
                updateQueueStepMarkers(data.status);
                
                // Mettre √† jour l'heure de derni√®re mise √† jour
                const now = new Date();
                const timeString = now.getHours() + ':' + now.getMinutes().toString().padStart(2, '0');
                document.getElementById('modal-last-updated').textContent = 'Derni√®re mise √† jour: ' + timeString;
            } else {
                // La commande n'est plus en file d'attente (livr√©e ou annul√©e)
                document.getElementById('modal-queue-position').textContent = "-";
                document.getElementById('modal-queue-time').textContent = data.status === 'Livr√©' ? "Termin√©" : "Annul√©";
                document.getElementById('modal-queue-status').textContent = data.status;
                
                // Mettre √† jour les marqueurs d'√©tape
                updateQueueStepMarkers(data.status);
            }
        })
        .catch(error => {
            console.error('Erreur lors de la r√©cup√©ration des informations de file d\'attente:', error);
            
            // En cas d'erreur, montrer des donn√©es fictives
            document.getElementById('modal-queue-position').textContent = "3";
            document.getElementById('modal-queue-time').textContent = "30-45 min";
            document.getElementById('modal-queue-status').textContent = "En pr√©paration";
            
            // Mettre √† jour le style du statut
            const statusElement = document.getElementById('modal-queue-status');
            statusElement.className = 'queue-status status-processing';
            
            // Mettre √† jour les marqueurs d'√©tape
            updateQueueStepMarkers('En pr√©paration');
            
            // Mettre √† jour l'heure de derni√®re mise √† jour
            const now = new Date();
            const timeString = now.getHours() + ':' + now.getMinutes().toString().padStart(2, '0');
            document.getElementById('modal-last-updated').textContent = 'Derni√®re mise √† jour: ' + timeString;
        });
}
function updateQueueStepMarkers(status) {
    // R√©cup√©rer tous les marqueurs d'√©tape dans le modal
    const markers = document.querySelectorAll('#queue-modal .queue-marker');
    
    // R√©initialiser tous les marqueurs (enlever la classe active)
    markers.forEach(marker => {
        marker.classList.remove('active');
    });
    
    // Activer les marqueurs appropri√©s en fonction du statut s√©lectionn√©
    switch(status) {
        case 'En attente':
            // Activer uniquement le premier marqueur (Confirmation)
            markers[0].classList.add('active');
            break;
            
        case 'En pr√©paration':
            // Activer les deux premiers marqueurs (Confirmation et Pr√©paration)
            markers[0].classList.add('active');
            markers[1].classList.add('active');
            break;
            
        case 'Exp√©di√©':
        case 'En route':
        case 'Pr√™te pour livraison':
            // Activer les trois premiers marqueurs (Confirmation, Pr√©paration, En route)
            markers[0].classList.add('active');
            markers[1].classList.add('active');
            markers[2].classList.add('active');
            break;
            
        case 'Livr√©':
            // Activer tous les marqueurs (commande compl√®te)
            markers.forEach(marker => {
                marker.classList.add('active');
            });
            break;
            
        case 'Annul√©':
            // Pour les commandes annul√©es, vous pourriez vouloir une visualisation sp√©ciale
            // Par d√©faut, on garde juste le premier marqueur actif
            markers[0].classList.add('active');
            break;
            
        default:
            // Par d√©faut, activer seulement le premier marqueur
            markers[0].classList.add('active');
    }
    
    // Mettre √† jour la barre de progression en fonction du statut
    let progressPercentage = 0;
    
    switch(status) {
        case 'En attente':
            progressPercentage = 25;
            break;
        case 'En pr√©paration':
            progressPercentage = 50;
            break;
        case 'Exp√©di√©':
        case 'En route':
        case 'Pr√™te pour livraison':
            progressPercentage = 75;
            break;
        case 'Livr√©':
            progressPercentage = 100;
            break;
        case 'Annul√©':
            progressPercentage = 25; // Pour les commandes annul√©es, on garde une progression minimale
            break;
        default:
            progressPercentage = 25;
    }
    
    // Mettre √† jour la barre de progression
    const progressBar = document.getElementById('modal-queue-progress');
    if (progressBar) {
        progressBar.style.width = `${progressPercentage}%`;
    }
    
    // Mettre √† jour l'affichage du statut dans le modal
    const statusElement = document.getElementById('modal-queue-status');
    if (statusElement) {
        statusElement.textContent = status;
        
        // Mettre √† jour la classe du statut
        statusElement.className = 'queue-status';
        switch(status) {
            case 'En attente':
                statusElement.classList.add('status-pending');
                break;
            case 'En pr√©paration':
                statusElement.classList.add('status-processing');
                break;
            case 'Exp√©di√©':
            case 'En route':
            case 'Pr√™te pour livraison':
                statusElement.classList.add('status-shipped');
                break;
            case 'Livr√©':
                statusElement.classList.add('status-delivered');
                break;
            case 'Annul√©':
                statusElement.classList.add('status-cancelled');
                break;
        }
    }
    
    // Mettre √† jour l'affichage du temps estim√© en fonction du statut
    updateEstimatedTimeDisplay(status);
}

/**
 * Met √† jour l'affichage du temps estim√© en fonction du statut
 * @param {string} status - Le statut s√©lectionn√© par l'admin
 */
function updateEstimatedTimeDisplay(status) {
    const timeElement = document.getElementById('modal-queue-time');
    if (!timeElement) return;
    
    // D√©finir le temps estim√© en fonction du statut
    switch(status) {
        case 'En attente':
            // Pour les commandes en attente, on peut estimer un temps plus long
            timeElement.textContent = '45-60 min';
            break;
        case 'En pr√©paration':
            // Pour les commandes en pr√©paration, on r√©duit le temps estim√©
            timeElement.textContent = '20-30 min';
            break;
        case 'Exp√©di√©':
        case 'En route':
        case 'Pr√™te pour livraison':
            // Pour les commandes en route, le temps est encore plus court
            timeElement.textContent = '5-10 min';
            break;
        case 'Livr√©':
            // Pour les commandes livr√©es, on change le texte
            timeElement.textContent = 'Termin√©';
            break;
        case 'Annul√©':
            // Pour les commandes annul√©es, on indique l'annulation
            timeElement.textContent = 'Annul√©';
            break;
        default:
            // Par d√©faut, on garde un temps estim√© g√©n√©ral
            timeElement.textContent = '30-45 min';
    }
}
// Fonction pour initialiser l'aper√ßu de la file d'attente dans les cartes de commande
function initQueuePreview() {
    // R√©cup√©rer toutes les commandes actives
    const orderCards = document.querySelectorAll('.order-card:not([data-status="delivered"]):not([data-status="cancelled"])');
    
    orderCards.forEach(card => {
        // Extraire l'ID de la commande depuis la carte
        const orderIdElement = card.querySelector('.order-id');
        if (!orderIdElement) return;
        
        const orderIdText = orderIdElement.textContent;
        const match = orderIdText.match(/Commande #([A-Z0-9]+)/);
        if (!match) return;
        
        const orderDisplayId = match[1];
        const orderDataId = card.getAttribute('data-order-id');
        
        // Utiliser l'ID stock√© dans data-order-id s'il existe, sinon utiliser l'ID affich√©
        const orderId = orderDataId || orderDisplayId;
        
        // Afficher des valeurs de chargement pour l'indicateur de position
        let queueIndicator = card.querySelector('.queue-position-indicator');
        
        if (!queueIndicator) {
            // Cr√©er l'√©l√©ment s'il n'existe pas
            queueIndicator = document.createElement('div');
            queueIndicator.className = 'queue-position-indicator';
            
            // Ins√©rer avant l'ic√¥ne d'expansion
            const expandIcon = card.querySelector('.expand-icon');
            if (expandIcon && expandIcon.parentNode) {
                expandIcon.parentNode.insertBefore(queueIndicator, expandIcon);
            }
        }
        
        queueIndicator.innerHTML = `
            <span class="position-icon">üîÑ</span>
            <span>Chargement...</span>
        `;
        
        // Charger les informations de file d'attente pour chaque commande
        fetchQueueInfo(orderId, card);
    });
    
    // Configurer le rafra√Æchissement p√©riodique des informations (toutes les 2 minutes)
    setInterval(() => {
        orderCards.forEach(card => {
            const orderIdElement = card.querySelector('.order-id');
            if (!orderIdElement) return;
            
            const orderIdText = orderIdElement.textContent;
            const match = orderIdText.match(/Commande #([A-Z0-9]+)/);
            if (!match) return;
            
            const orderDisplayId = match[1];
            const orderDataId = card.getAttribute('data-order-id');
            const orderId = orderDataId || orderDisplayId;
            
            fetchQueueInfo(orderId, card);
        });
    }, 120000); // 2 minutes
}

// Fonction pour r√©cup√©rer les informations de file d'attente d'une commande
function fetchQueueInfo(orderId, orderCard) {
    fetch(`/api/orders/${orderId}/queue`)
        .then(response => response.json())
        .then(data => {
            if (data.success && data.inQueue) {
                // Obtenir l'indicateur de position
                const queueIndicator = orderCard.querySelector('.queue-position-indicator');
                if (!queueIndicator) return;
                
                // Mettre √† jour le contenu avec la position r√©elle
                queueIndicator.innerHTML = `
                    <span class="position-icon">üö∂</span>
                    <span>Position: ${data.queueInfo.position}</span>
                `;
                
                // Mettre √† jour le style en fonction de la position
                if (data.queueInfo.position <= 2) {
                    queueIndicator.style.color = 'var(--status-shipped)';
                    queueIndicator.style.fontWeight = 'bold';
                } else if (data.queueInfo.position <= 5) {
                    queueIndicator.style.color = 'var(--status-processing)';
                } else {
                    queueIndicator.style.color = 'var(--text-dark)';
                }
                
                // Stocker la position dans l'attribut data pour une utilisation ult√©rieure
                orderCard.setAttribute('data-queue-position', data.queueInfo.position);
                
                // Mettre √† jour le statut de la commande si n√©cessaire
                const statusElement = orderCard.querySelector('.order-status');
                if (statusElement && statusElement.textContent !== data.status) {
                    statusElement.textContent = data.status;
                    
                    // Mettre √† jour la classe de statut
                    statusElement.className = 'order-status';
                    switch(data.status) {
                        case 'En attente':
                            statusElement.classList.add('status-pending');
                            break;
                        case 'En pr√©paration':
                            statusElement.classList.add('status-processing');
                            break;
                        case 'Exp√©di√©':
                            statusElement.classList.add('status-shipped');
                            break;
                        case 'Livr√©':
                            statusElement.classList.add('status-delivered');
                            break;
                    }
                    
                    // Mettre √† jour l'attribut data-status de la carte
                    orderCard.setAttribute('data-status', getStatusClass(data.status));
                    
                    // Afficher une notification de changement de statut
                    showStatusChangeNotification(orderId, statusElement.textContent, data.status);
                }
            } else if (!data.inQueue) {
                // La commande n'est plus dans la file d'attente, masquer l'indicateur
                const queueIndicator = orderCard.querySelector('.queue-position-indicator');
                if (queueIndicator) {
                    queueIndicator.style.display = 'none';
                }
            }
        })
        .catch(error => {
            console.error('Erreur lors de la r√©cup√©ration des informations de file d\'attente:', error);
            
            // Afficher un message d'erreur dans l'indicateur
            const queueIndicator = orderCard.querySelector('.queue-position-indicator');
            if (queueIndicator) {
                queueIndicator.innerHTML = `
                    <span class="position-icon">‚ö†Ô∏è</span>
                    <span>Erreur</span>
                `;
            }
        });
}

// Fonction auxiliaire pour obtenir la classe CSS correspondant au statut
function getStatusClass(status) {
    switch(status) {
        case 'En attente':
            return 'pending';
        case 'En pr√©paration':
            return 'processing';
        case 'Exp√©di√©':
            return 'shipped';
        case 'Livr√©':
            return 'delivered';
        case 'Annul√©':
            return 'cancelled';
        default:
            return 'pending';
    }
}



















// Fonction pour modifier l'interface utilisateur de la commande
function updateOrderUI(orderId, position, estimatedTime, status) {
    // Trouver la carte de commande correspondante
    const orderCards = document.querySelectorAll('.order-card');
    let targetCard = null;
    
    orderCards.forEach(card => {
        const cardOrderId = card.querySelector('.order-header .order-id').textContent.split('#')[1].trim();
        if (cardOrderId === orderId) {
            targetCard = card;
        }
    });
    
    if (!targetCard) return;
    
    // Ajouter ou mettre √† jour l'indicateur de position dans l'en-t√™te de la commande
    let positionIndicator = targetCard.querySelector('.queue-position-indicator');
    
    if (!positionIndicator) {
        // Cr√©er l'√©l√©ment s'il n'existe pas
        positionIndicator = document.createElement('div');
        positionIndicator.className = 'queue-position-indicator';
        
        // Ins√©rer avant l'ic√¥ne d'expansion
        const expandIcon = targetCard.querySelector('.expand-icon');
        targetCard.querySelector('.order-header').insertBefore(positionIndicator, expandIcon);
    }
    
    // Mettre √† jour le contenu
    positionIndicator.innerHTML = `
        <span class="position-icon">üö∂</span>
        <span>Position: ${position}</span>
    `;
    
    // Mettre √† jour le style en fonction de la position
    if (position <= 2) {
        positionIndicator.style.color = 'var(--status-shipped)';
        positionIndicator.style.fontWeight = 'bold';
    } else if (position <= 5) {
        positionIndicator.style.color = 'var(--status-processing)';
    } else {
        positionIndicator.style.color = 'var(--text-dark)';
    }
}

// Fonction pour am√©liorer l'animation du modal
function enhanceModalAnimations() {
    // Ajouter des transitions plus fluides pour l'ouverture et la fermeture du modal
    const modalStyle = document.createElement('style');
    modalStyle.textContent = `
        .modal {
            transition: opacity 0.4s ease-out, visibility 0.4s ease-out;
        }
        
        .modal .modal-content {
            transform: translateY(20px);
            opacity: 0;
            transition: transform 0.4s ease-out, opacity 0.4s ease-out;
        }
        
        .modal.active .modal-content {
            transform: translateY(0);
            opacity: 1;
        }
        
        .queue-progress {
            transition: width 1s ease-in-out;
        }
        
        .queue-marker {
            transition: transform 0.3s ease-out, opacity 0.3s ease-out;
        }
        
        .queue-marker.active {
            transform: scale(1.1);
        }
    `;
    document.head.appendChild(modalStyle);
}

// Fonction pour ajouter des notifications de changement de statut
function setupStatusChangeNotifications() {
    // Stocker les statuts initiaux des commandes
    const orderStatuses = {};
    
    document.querySelectorAll('.order-card').forEach(card => {
        const orderId = card.querySelector('.order-header .order-id').textContent.split('#')[1].trim();
        const statusText = card.querySelector('.order-status').textContent;
        orderStatuses[orderId] = statusText;
    });
    
    // V√©rifier p√©riodiquement les changements de statut (toutes les 2 minutes)
    setInterval(() => {
        document.querySelectorAll('.order-card').forEach(card => {
            const orderId = card.querySelector('.order-header .order-id').textContent.split('#')[1].trim();
            const currentStatus = card.querySelector('.order-status').textContent;
            
            // Si le statut a chang√©
            if (orderStatuses[orderId] && orderStatuses[orderId] !== currentStatus) {
                // Cr√©er une notification
                showStatusChangeNotification(orderId, orderStatuses[orderId], currentStatus);
                
                // Mettre √† jour le statut stock√©
                orderStatuses[orderId] = currentStatus;
            }
        });
    }, 120000);
}

// Fonction pour afficher une notification de changement de statut
function showStatusChangeNotification(orderId, oldStatus, newStatus) {
    // Cr√©er l'√©l√©ment de notification
    const notification = document.createElement('div');
    notification.className = 'status-notification';
    notification.innerHTML = `
        <div class="notification-icon">üîî</div>
        <div class="notification-content">
            <div class="notification-title">Commande #${orderId}</div>
            <div class="notification-message">Statut chang√© de "${oldStatus}" √† "${newStatus}"</div>
        </div>
        <div class="notification-close">√ó</div>
    `;
    
    // Styles pour la notification
    notification.style.position = 'fixed';
    notification.style.bottom = '20px';
    notification.style.right = '20px';
    notification.style.backgroundColor = 'white';
    notification.style.borderRadius = '10px';
    notification.style.boxShadow = '0 4px 15px rgba(0, 0, 0, 0.2)';
    notification.style.padding = '15px';
    notification.style.display = 'flex';
    notification.style.alignItems = 'center';
    notification.style.zIndex = '2000';
    notification.style.maxWidth = '350px';
    notification.style.animation = 'slideIn 0.5s forwards';
    
    // Ajouter l'animation CSS
    const style = document.createElement('style');
    style.textContent = `
        @keyframes slideIn {
            from {
                transform: translateX(100%);
                opacity: 0;
            }
            to {
                transform: translateX(0);
                opacity: 1;
            }
        }
        
        @keyframes slideOut {
            from {
                transform: translateX(0);
                opacity: 1;
            }
            to {
                transform: translateX(100%);
                opacity: 0;
            }
        }
    `;
    document.head.appendChild(style);
    
    // Styles pour les √©l√©ments internes
    notification.querySelector('.notification-icon').style.fontSize = '24px';
    notification.querySelector('.notification-icon').style.marginRight = '15px';
    notification.querySelector('.notification-content').style.flex = '1';
    notification.querySelector('.notification-title').style.fontWeight = 'bold';
    notification.querySelector('.notification-title').style.marginBottom = '5px';
    notification.querySelector('.notification-close').style.cursor = 'pointer';
    notification.querySelector('.notification-close').style.fontSize = '20px';
    
    // Fermer la notification lors du clic sur le bouton de fermeture
    notification.querySelector('.notification-close').addEventListener('click', () => {
        notification.style.animation = 'slideOut 0.5s forwards';
        setTimeout(() => {
            notification.remove();
        }, 500);
    });
    
    // Ajouter la notification au DOM
    document.body.appendChild(notification);
    
    // Fermer automatiquement apr√®s 5 secondes
    setTimeout(() => {
        if (document.body.contains(notification)) {
            notification.style.animation = 'slideOut 0.5s forwards';
            setTimeout(() => {
                notification.remove();
            }, 500);
        }
    }, 5000);
}

///////////////////////////////////////////////////////////////////////////////////
// V√©rifier si l'utilisateur est authentifi√©
function checkAuthStatus() {
    fetch('/api/auth/status')
        .then(response => response.json())
        .then(data => {
            if (!data.authenticated) {
                window.location.href = '/login.html';
            } else {
                // Mettre √† jour l'interface avec le nom d'utilisateur
                const username = data.user.username;
                updateUserInterface(username);
            }
        })
        .catch(error => {
            console.error('Erreur lors de la v√©rification du statut d\'authentification:', error);
            window.location.href = '/login.html';
        });
}

// Mettre √† jour l'interface avec les informations de l'utilisateur
function updateUserInterface(username) {
    // Mettre √† jour l'interface si n√©cessaire (par exemple, afficher le nom d'utilisateur)
    const userProfileButton = document.getElementById('profile-button');
    if (userProfileButton) {
        userProfileButton.innerHTML = `<div class="profile-icon">üë§</div>${username}`;
    }
}

// Charger les commandes de l'utilisateur depuis l'API
function loadUserOrders() {
    // Afficher un indicateur de chargement
    const ordersList = document.querySelector('.orders-list');
    ordersList.innerHTML = '<div class="loading-indicator">Chargement des commandes...</div>';
    
    fetch('/api/orders/user')
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                displayOrders(data.orders);
            } else {
                ordersList.innerHTML = '<div class="error-message">Erreur lors du chargement des commandes</div>';
            }
        })
        .catch(error => {
            console.error('Erreur lors du chargement des commandes:', error);
            ordersList.innerHTML = '<div class="error-message">Erreur de connexion au serveur</div>';
        });
}

// Afficher les commandes dans l'interface
function displayOrders(orders) {
    const ordersList = document.querySelector('.orders-list');
    
    // Vider la liste des commandes
    ordersList.innerHTML = '';
    
    if (orders.length === 0) {
        ordersList.innerHTML = '<div class="no-orders">Vous n\'avez pas encore de commandes</div>';
        return;
    }
    
    // Trier les commandes par date (plus r√©centes en premier)
    orders.sort((a, b) => new Date(b.createdAt) - new Date(a.createdAt));
    
    // Cr√©er un √©l√©ment pour chaque commande
    orders.forEach(order => {
        const orderElement = createOrderElement(order);
        ordersList.appendChild(orderElement);
    });
    
    // Ajouter les √©couteurs d'√©v√©nements pour l'expansion des d√©tails
    initExpandButtons();
}

// Cr√©er un √©l√©ment HTML pour une commande
function createOrderElement(order) {
    // Formater la date
    const orderDate = new Date(order.createdAt);
    const formattedDate = orderDate.toLocaleDateString('fr-FR', {
        day: 'numeric',
        month: 'long',
        year: 'numeric'
    });
    
    // Cr√©er l'√©l√©ment de la commande
    const orderCard = document.createElement('div');
    orderCard.className = 'order-card';
    orderCard.setAttribute('data-status', order.status.toLowerCase().replace(' ', '-'));
    orderCard.setAttribute('data-order-id', order._id);
    
    // G√©n√©rer un ID de commande plus lisible (si n√©cessaire)
    const displayOrderId = order.orderNumber || `BD${orderDate.getFullYear().toString().slice(2)}${(orderDate.getMonth() + 1).toString().padStart(2, '0')}${Math.floor(Math.random() * 100).toString().padStart(2, '0')}`;
    
    // Structure de la carte de commande
    orderCard.innerHTML = `
        <div class="order-header">
            <div class="order-id">Commande #${displayOrderId}</div>
            <div class="order-date">${formattedDate}</div>
            <div class="order-status status-${getStatusClass(order.status)}">${order.status}</div>
            <div class="expand-icon">‚ñº</div>
        </div>
        <div class="order-body">
            <div class="order-products">
                <div class="product-item">
                    <div class="product-icon">üåø</div>
                    <div class="product-info">
                        <div class="product-name">${order.productName}</div>
                        <div class="product-details">
                            <div class="product-quantity">${order.quantity}g</div>
                            <div class="product-price">${order.totalPrice.toFixed(2)}‚Ç¨</div>
                        </div>
                    </div>
                </div>
            </div>
            
            <div class="order-summary">
                <div class="summary-row">
                    <div>Sous-total</div>
                    <div>${(order.totalPrice - 5).toFixed(2)}‚Ç¨</div>
                </div>
                <div class="summary-row">
                    <div>Frais de livraison</div>
                    <div>5,00‚Ç¨</div>
                </div>
                <div class="summary-row">
                    <div>Total</div>
                    <div>${order.totalPrice.toFixed(2)}‚Ç¨</div>
                </div>
            </div>
            
            <!-- Tracking info -->
            <div class="tracking-info">
                <div class="tracking-title">
                    <span class="tracking-title-icon">üöö</span> Suivi de commande
                </div>
                <div class="tracking-steps">
                    <div class="tracking-line"></div>
                    ${generateTrackingSteps(order.status)}
                </div>
            </div>
            
            <div class="order-actions">
                <button class="action-btn queue-modal" data-order="${displayOrderId}">
                    <span class="queue-btn-icon">üî¢</span> File d'attente
                </button>
                <button class="action-btn chat-btn" data-order="${displayOrderId}">
                    <span class="chat-btn-icon">üí¨</span> Chatter avec le livreur
                </button>
                <button class="action-btn secondary tracking-btn">
                    <span class="tracking-btn-icon">üîÑ</span> Actualiser le suivi
                </button>
            </div>
        </div>
    `;
    
    return orderCard;
}
// G√©n√©rer les √©tapes de suivi en fonction du statut
function generateTrackingSteps(status) {
    const steps = [
        { title: 'Commande confirm√©e', description: 'Votre commande a √©t√© re√ßue et confirm√©e' },
        { title: 'En pr√©paration', description: 'Votre commande est en cours de pr√©paration' },
        { title: 'Pr√™te pour livraison', description: 'Votre commande sera bient√¥t pr√™te √† √™tre r√©cup√©r√©e' },
        { title: 'Livraison en main propre', description: 'Paiement et remise en main propre' }
    ];
    
    let currentStepIndex = -1;
    
    switch(status) {
        case 'En attente':
            currentStepIndex = 0;
            break;
        case 'En pr√©paration':
            currentStepIndex = 1;
            break;
        case 'Exp√©di√©':
        case 'Pr√™te pour livraison':
            currentStepIndex = 2;
            break;
        case 'Livr√©':
            currentStepIndex = 3;
            break;
        default:
            currentStepIndex = 0;
    }
    
    let stepsHTML = '';
    const now = new Date();
    const formattedDate = `${now.getDate()} Mars ${now.getFullYear()}, ${now.getHours().toString().padStart(2, '0')}:${now.getMinutes().toString().padStart(2, '0')}`;
    
    steps.forEach((step, index) => {
        let stepClass = '';
        let stepDate = '-';
        
        if (index < currentStepIndex) {
            stepClass = 'completed';
            stepDate = formattedDate; // Pour simplifier, on utilise la m√™me date pour toutes les √©tapes compl√©t√©es
        } else if (index === currentStepIndex) {
            stepClass = 'active';
            stepDate = formattedDate;
        }
        
        stepsHTML += `
            <div class="tracking-step">
                <div class="step-marker ${stepClass}"></div>
                <div class="step-content">
                    <div class="step-title">${step.title}</div>
                    <div class="step-date">${stepDate}</div>
                    <div class="step-description">${step.description}</div>
                </div>
            </div>
        `;
    });
    
    return stepsHTML;
}

// Obtenir la classe CSS correspondant au statut
function getStatusClass(status) {
    switch(status) {
        case 'En attente':
            return 'pending';
        case 'En pr√©paration':
            return 'processing';
        case 'Exp√©di√©':
            return 'shipped';
        case 'Livr√©':
            return 'delivered';
        case 'Annul√©':
            return 'cancelled';
        default:
            return 'pending';
    }
}

// Initialiser les boutons de filtre
function initFilterButtons() {
    const filterButtons = document.querySelectorAll('.filter-btn');
    const orderCards = document.querySelectorAll('.order-card');
    
    filterButtons.forEach(button => {
        button.addEventListener('click', function() {
            // Mettre √† jour la classe active
            filterButtons.forEach(btn => btn.classList.remove('active'));
            this.classList.add('active');
            
            // Filtrer les commandes
            const filter = this.getAttribute('data-filter');
            
            document.querySelectorAll('.order-card').forEach(card => {
                if (filter === 'all' || card.getAttribute('data-status') === filter) {
                    card.style.display = 'block';
                } else {
                    card.style.display = 'none';
                }
            });
        });
    });
}

// Initialiser les boutons d'expansion
function initExpandButtons() {
    const orderCards = document.querySelectorAll('.order-card');
    
    orderCards.forEach(card => {
        const header = card.querySelector('.order-header');
        
        header.addEventListener('click', function() {
            card.classList.toggle('expanded');
        });
    });
}

// Configurer la recherche de commandes
function setupSearchOrder() {
    const searchInput = document.querySelector('.search-order');
    
    if (searchInput) {
        searchInput.addEventListener('input', function() {
            const searchTerm = this.value.toLowerCase();
            
            document.querySelectorAll('.order-card').forEach(card => {
                const orderID = card.querySelector('.order-id').textContent.toLowerCase();
                const orderDate = card.querySelector('.order-date').textContent.toLowerCase();
                const orderStatus = card.querySelector('.order-status').textContent.toLowerCase();
                
                // Rechercher aussi dans les produits si la carte est d√©velopp√©e
                let productsMatch = false;
                const productItems = card.querySelectorAll('.product-name');
                
                productItems.forEach(item => {
                    if (item.textContent.toLowerCase().includes(searchTerm)) {
                        productsMatch = true;
                    }
                });
                
                if (orderID.includes(searchTerm) || 
                    orderDate.includes(searchTerm) || 
                    orderStatus.includes(searchTerm) ||
                    productsMatch) {
                    card.style.display = 'block';
                } else {
                    card.style.display = 'none';
                }
            });
        });
    } else {
        // Cr√©er l'input de recherche s'il n'existe pas
        const searchInput = document.createElement('input');
        searchInput.type = 'text';
        searchInput.placeholder = 'Rechercher une commande...';
        searchInput.className = 'search-order';
        searchInput.style.padding = '10px 15px';
        searchInput.style.borderRadius = '25px';
        searchInput.style.border = '1px solid #ddd';
        searchInput.style.margin = '0 0 20px 0';
        searchInput.style.width = '100%';
        searchInput.style.fontSize = '14px';
        
        // Ins√©rer le champ de recherche avant les filtres
        const filtersContainer = document.querySelector('.orders-filter');
        filtersContainer.parentNode.insertBefore(searchInput, filtersContainer);
        
        // Ajouter l'√©couteur d'√©v√©nement
        searchInput.addEventListener('input', function() {
            const searchTerm = this.value.toLowerCase();
            
            document.querySelectorAll('.order-card').forEach(card => {
                const orderID = card.querySelector('.order-id').textContent.toLowerCase();
                const orderDate = card.querySelector('.order-date').textContent.toLowerCase();
                const orderStatus = card.querySelector('.order-status').textContent.toLowerCase();
                
                // Rechercher aussi dans les produits
                let productsMatch = false;
                const productItems = card.querySelectorAll('.product-name');
                
                productItems.forEach(item => {
                    if (item.textContent.toLowerCase().includes(searchTerm)) {
                        productsMatch = true;
                    }
                });
                
                if (orderID.includes(searchTerm) || 
                    orderDate.includes(searchTerm) || 
                    orderStatus.includes(searchTerm) ||
                    productsMatch) {
                    card.style.display = 'block';
                } else {
                    card.style.display = 'none';
                }
            });
        });
    }
}

// Initialiser le modal de chat
function initChatModal() {
    // V√©rifier si le modal de chat existe d√©j√†
    let chatModal = document.getElementById('chat-modal');
    
    // Cr√©er le modal s'il n'existe pas
    if (!chatModal) {
        chatModal = document.createElement('div');
        chatModal.id = 'chat-modal';
        chatModal.className = 'modal';
        
        chatModal.innerHTML = `
            <div class="modal-content">
                <div class="modal-header">
                    <div class="modal-title">Chat avec le livreur - Commande #<span id="chat-order-id"></span></div>
                    <button class="modal-close" id="close-chat-modal">√ó</button>
                </div>
                <div class="modal-body">
                    <div class="chat-container">
                        <div class="chat-messages" id="chat-messages">
                            <div class="system-message">
                                D√©but de la conversation avec votre livreur.
                            </div>
                            <div class="message message-other">
                                <div class="message-sender">Livreur</div>
                                Bonjour ! Je suis votre livreur pour la commande. Je vous contacterai d√®s que votre commande sera pr√™te √† √™tre livr√©e.
                                <div class="message-time">Aujourd'hui, ${new Date().getHours()}:${String(new Date().getMinutes()).padStart(2, '0')}</div>
                            </div>
                        </div>
                        <div class="chat-input">
                            <input type="text" placeholder="Tapez votre message..." id="chat-input-field">
                            <button id="send-chat-message">‚û§</button>
                        </div>
                    </div>
                </div>
            </div>
        `;
        
        document.body.appendChild(chatModal);
        
        // Ajouter les √©v√©nements pour le modal
        document.getElementById('close-chat-modal').addEventListener('click', function() {
            chatModal.classList.remove('active');
        });
        
        // G√©rer l'envoi de message
        document.getElementById('send-chat-message').addEventListener('click', sendChatMessage);
        document.getElementById('chat-input-field').addEventListener('keypress', function(e) {
            if (e.key === 'Enter') {
                sendChatMessage();
            }
        });
    }
    
    // Ajouter les √©v√©nements pour les boutons de chat
    document.querySelectorAll('.chat-btn').forEach(button => {
        button.addEventListener('click', function(e) {
            e.stopPropagation(); // Emp√™cher l'ouverture/fermeture de la carte
            
            const orderId = this.getAttribute('data-order');
            document.getElementById('chat-order-id').textContent = orderId;
            
            // Charger les messages pr√©c√©dents (simulation)
            // Dans une impl√©mentation r√©elle, vous feriez un appel API ici
            loadChatHistory(orderId);
            
            // Afficher le modal
            chatModal.classList.add('active');
        });
    });
}

// Charger l'historique du chat (simulation)
function loadChatHistory(orderId) {
    // Dans une impl√©mentation r√©elle, vous feriez un appel API ici
    // Simulation d'une conversation
    const chatMessages = document.getElementById('chat-messages');
    
    // Conserver uniquement le message syst√®me et le premier message du livreur
    chatMessages.innerHTML = `
        <div class="system-message">
            D√©but de la conversation avec votre livreur.
        </div>
        <div class="message message-other">
            <div class="message-sender">Livreur</div>
            Bonjour ! Je suis votre livreur pour la commande #${orderId}. Je vous contacterai d√®s que votre commande sera pr√™te √† √™tre livr√©e.
            <div class="message-time">Aujourd'hui, ${new Date().getHours()}:${String(new Date().getMinutes()).padStart(2, '0')}</div>
        </div>
    `;
    
    // Faire d√©filer jusqu'au bas
    chatMessages.scrollTop = chatMessages.scrollHeight;
}

// Envoyer un message dans le chat
function sendChatMessage() {
    const inputField = document.getElementById('chat-input-field');
    const messageText = inputField.value.trim();
    
    if (messageText) {
        const chatMessages = document.getElementById('chat-messages');
        const time = `${new Date().getHours()}:${String(new Date().getMinutes()).padStart(2, '0')}`;
        
        // Ajouter le message de l'utilisateur
        chatMessages.innerHTML += `
            <div class="message message-user">
                <div class="message-sender">Vous</div>
                ${messageText}
                <div class="message-time">Aujourd'hui, ${time}</div>
            </div>
        `;
        
        // Effacer le champ de saisie
        inputField.value = '';
        
        // Faire d√©filer jusqu'au bas
        chatMessages.scrollTop = chatMessages.scrollHeight;
        
        // Simuler une r√©ponse du livreur apr√®s un court d√©lai
        setTimeout(function() {
            simulateDeliveryResponse(chatMessages);
        }, 1000 + Math.random() * 2000);
    }
}

// Simuler une r√©ponse du livreur
function simulateDeliveryResponse(chatMessages) {
    const responses = [
        "Je viens de recevoir votre commande, je la pr√©pare imm√©diatement.",
        "Votre commande est en cours de pr√©paration. Je vous tiens au courant.",
        "Je serai dans votre secteur dans environ 30 minutes.",
        "Je viens de terminer une livraison, je serai chez vous bient√¥t.",
        "N'h√©sitez pas √† me donner des indications pr√©cises pour vous trouver.",
        "Je confirme avoir re√ßu votre message, √† bient√¥t!"
    ];
    
    const randomResponse = responses[Math.floor(Math.random() * responses.length)];
    const time = `${new Date().getHours()}:${String(new Date().getMinutes()).padStart(2, '0')}`;
    
    // Ajouter la r√©ponse du livreur
    chatMessages.innerHTML += `
        <div class="message message-other">
            <div class="message-sender">Livreur</div>
            ${randomResponse}
            <div class="message-time">Aujourd'hui, ${time}</div>
        </div>
    `;
    
    // Faire d√©filer jusqu'au bas
    chatMessages.scrollTop = chatMessages.scrollHeight;
}

// Gestion de la sidebar
document.addEventListener('DOMContentLoaded', function() {
    const sidebarToggle = document.getElementById('sidebar-toggle');
    const sidebar = document.getElementById('sidebar');
    const closeSidebar = document.getElementById('close-sidebar');
    const mainContent = document.getElementById('main-content');
    
    // Ouvrir la sidebar
    if (sidebarToggle) {
        sidebarToggle.addEventListener('click', function() {
            sidebar.classList.add('open');
        });
    }
    
    // Fermer la sidebar
    if (closeSidebar) {
        closeSidebar.addEventListener('click', function() {
            sidebar.classList.remove('open');
        });
    }
    
    // Fermer la sidebar en cliquant en dehors
    if (mainContent) {
        mainContent.addEventListener('click', function(e) {
            if (sidebar.classList.contains('open')) {
                sidebar.classList.remove('open');
            }
        });
    }
    
    // G√©rer la d√©connexion
    const logoutItem = document.getElementById('logout-item');
    if (logoutItem) {
        logoutItem.addEventListener('click', function() {
            window.location.href = '/api/auth/logout';
        });
    }
});


// Bouton pour d√©velopper/r√©duire toutes les commandes
document.addEventListener('DOMContentLoaded', function() {
    const filtersContainer = document.querySelector('.orders-filter');
    
    if (filtersContainer) {
        const expandAllBtn = document.createElement('button');
        expandAllBtn.textContent = 'D√©velopper tout';
        expandAllBtn.className = 'filter-btn';
        expandAllBtn.style.marginLeft = 'auto';
        
        // Ajouter le bouton au container des filtres
        filtersContainer.appendChild(expandAllBtn);
        
        // √âtat pour savoir si tout est d√©velopp√© ou non
        let allExpanded = false;
        
        // Fonction pour d√©velopper/r√©duire toutes les commandes
        expandAllBtn.addEventListener('click', function() {
            allExpanded = !allExpanded;
            
            document.querySelectorAll('.order-card').forEach(card => {
                if (allExpanded) {
                    card.classList.add('expanded');
                } else {
                    card.classList.remove('expanded');
                }
            });
            
            this.textContent = allExpanded ? 'R√©duire tout' : 'D√©velopper tout';
        });
    }
});

// Ajout de la fonctionnalit√© de tri des commandes
document.addEventListener('DOMContentLoaded', function() {
    const filtersContainer = document.querySelector('.orders-filter');
    
    if (filtersContainer) {
        const sortSelect = document.createElement('select');
        sortSelect.className = 'sort-select';
        sortSelect.style.padding = '8px 15px';
        sortSelect.style.borderRadius = '25px';
        sortSelect.style.border = '1px solid #ddd';
        sortSelect.style.marginLeft = '10px';
        sortSelect.style.fontSize = '14px';
        sortSelect.style.cursor = 'pointer';
        
        // Options de tri
        const sortOptions = [
            { value: 'date-desc', text: 'Date (r√©cente d\'abord)' },
            { value: 'date-asc', text: 'Date (ancienne d\'abord)' },
            { value: 'status', text: 'Statut' }
        ];
        
        sortOptions.forEach(option => {
            const optElement = document.createElement('option');
            optElement.value = option.value;
            optElement.textContent = option.text;
            sortSelect.appendChild(optElement);
        });
        
        // Ajouter le s√©lecteur de tri apr√®s le bouton D√©velopper tout (s'il existe)
        const expandAllBtn = filtersContainer.querySelector('button[textContent="D√©velopper tout"]');
        if (expandAllBtn) {
            expandAllBtn.after(sortSelect);
        } else {
            filtersContainer.appendChild(sortSelect);
        }
        
        // Fonction de tri des commandes
        sortSelect.addEventListener('change', function() {
            const sortValue = this.value;
            const ordersList = document.querySelector('.orders-list');
            const cardsArray = Array.from(document.querySelectorAll('.order-card'));
            
            // Trier les cartes selon l'option choisie
            cardsArray.sort((a, b) => {
                if (sortValue === 'date-desc' || sortValue === 'date-asc') {
                    const dateA = new Date(a.querySelector('.order-date').textContent);
                    const dateB = new Date(b.querySelector('.order-date').textContent);
                    
                    return sortValue === 'date-desc' ? dateB - dateA : dateA - dateB;
                } else if (sortValue === 'status') {
                    const statusA = a.querySelector('.order-status').textContent;
                    const statusB = b.querySelector('.order-status').textContent;
                    
                    // Ordre des statuts : En attente, En pr√©paration, En route, Livr√©e
                    const statusOrder = {
                        'En attente': 1,
                        'En pr√©paration': 2,
                        'En route': 3,
                        'Pr√™te pour livraison': 3,
                        'Livr√©e': 4
                    };
                    
                    return statusOrder[statusA] - statusOrder[statusB];
                }
                
                return 0;
            });
            
            // R√©organiser les cartes dans le DOM
            cardsArray.forEach(card => {
                ordersList.appendChild(card);
            });
        });
    }
});
